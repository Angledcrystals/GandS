import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import pandas as pd

def householder_reflection_3d(G, v):
    """Calculate the Householder reflection of 3D vector G across the hyperplane with normal v."""
    v_norm = np.linalg.norm(v)
    if v_norm < 1e-10:
        return G
    v_unit = v / v_norm
    v_dot_G = np.dot(v_unit, G)
    return G - 2 * v_dot_G * v_unit

def project_3d_to_2d(G_3d, projection_type='xy'):
    """Project 3D vector to 2D using different projection methods."""
    if projection_type == 'xy':
        return np.array([G_3d[0], G_3d[1]])
    elif projection_type == 'xz':
        return np.array([G_3d[0], G_3d[2]])
    elif projection_type == 'yz':
        return np.array([G_3d[1], G_3d[2]])
    elif projection_type == 'stereographic':
        # Stereographic projection from unit sphere
        if G_3d[2] >= 1.0:
            return np.array([0, 0])
        denom = 1 - G_3d[2]
        return np.array([G_3d[0]/denom, G_3d[1]/denom])
    elif projection_type == 'orthographic':
        # Orthographic projection with viewing angle
        return np.array([G_3d[0]*0.8 + G_3d[2]*0.2, G_3d[1]*0.8 + G_3d[2]*0.2])

def spherical_to_cartesian(theta, phi, r=1):
    """Convert spherical coordinates to 3D cartesian."""
    x = r * np.sin(phi) * np.cos(theta)
    y = r * np.sin(phi) * np.sin(theta)
    z = r * np.cos(phi)
    return np.array([x, y, z])

def check_alignment_condition(G_theta, G_phi, hadit_theta, hadit_phi, nuit_radius=1.0, 
                            projection_type='xy', tolerance=0.05):
    """Check if S aligns with Nuit boundary for given parameters."""
    # Create 3D vectors
    G_3d = spherical_to_cartesian(G_theta, G_phi)
    hadit_3d = spherical_to_cartesian(hadit_theta, hadit_phi)
    
    # Calculate reflected G
    G_reflected = householder_reflection_3d(G_3d, hadit_3d)
    
    # Project to 2D to get S
    S_2d = project_3d_to_2d(G_reflected, projection_type)
    
    # Check alignment with Nuit boundary
    distance_from_origin = np.linalg.norm(S_2d)
    distance_from_boundary = abs(distance_from_origin - nuit_radius)
    is_aligned = distance_from_boundary <= tolerance
    
    return is_aligned, distance_from_boundary, distance_from_origin, S_2d, G_reflected

def find_all_alignments(theta_samples=50, phi_samples=25, hadit_theta_samples=20, 
                       hadit_phi_samples=10, nuit_radius=1.0, projection_type='xy', 
                       tolerance=0.05):
    """Find all parameter combinations where S aligns with Nuit boundary."""
    
    alignments = []
    
    # Create parameter grids
    theta_range = np.linspace(0, 2*np.pi, theta_samples)
    phi_range = np.linspace(0, np.pi, phi_samples)
    hadit_theta_range = np.linspace(0, 2*np.pi, hadit_theta_samples)
    hadit_phi_range = np.linspace(0, np.pi, hadit_phi_samples)
    
    total_combinations = len(theta_range) * len(phi_range) * len(hadit_theta_range) * len(hadit_phi_range)
    print(f"Checking {total_combinations:,} parameter combinations...")
    
    count = 0
    for G_theta in theta_range:
        for G_phi in phi_range:
            for hadit_theta in hadit_theta_range:
                for hadit_phi in hadit_phi_range:
                    count += 1
                    
                    is_aligned, dist_boundary, dist_origin, S_2d, G_reflected = check_alignment_condition(
                        G_theta, G_phi, hadit_theta, hadit_phi, nuit_radius, projection_type, tolerance
                    )
                    
                    if is_aligned:
                        alignments.append({
                            'G_theta': G_theta,
                            'G_phi': G_phi,
                            'G_theta_deg': np.degrees(G_theta),
                            'G_phi_deg': np.degrees(G_phi),
                            'hadit_theta': hadit_theta,
                            'hadit_phi': hadit_phi,
                            'hadit_theta_deg': np.degrees(hadit_theta),
                            'hadit_phi_deg': np.degrees(hadit_phi),
                            'distance_from_boundary': dist_boundary,
                            'distance_from_origin': dist_origin,
                            'S_x': S_2d[0],
                            'S_y': S_2d[1],
                            'G_reflected_x': G_reflected[0],
                            'G_reflected_y': G_reflected[1],
                            'G_reflected_z': G_reflected[2],
                            'nuit_radius': nuit_radius,
                            'projection': projection_type
                        })
                    
                    if count % 10000 == 0:
                        print(f"Progress: {count:,}/{total_combinations:,} ({100*count/total_combinations:.1f}%) - Found {len(alignments)} alignments")
    
    print(f"Analysis complete! Found {len(alignments)} alignments out of {total_combinations:,} combinations")
    return alignments

def analyze_alignment_patterns(alignments):
    """Analyze patterns in the alignment data."""
    if not alignments:
        print("No alignments found!")
        return
    
    df = pd.DataFrame(alignments)
    
    print("\n=== ALIGNMENT ANALYSIS ===")
    print(f"Total alignments found: {len(alignments)}")
    print(f"Projection type: {df['projection'].iloc[0]}")
    print(f"Nuit radius: {df['nuit_radius'].iloc[0]}")
    
    print("\n--- Distance Statistics ---")
    print(f"Mean distance from boundary: {df['distance_from_boundary'].mean():.6f}")
    print(f"Max distance from boundary: {df['distance_from_boundary'].max():.6f}")
    print(f"Min distance from boundary: {df['distance_from_boundary'].min():.6f}")
    
    print(f"\nMean |S|: {df['distance_from_origin'].mean():.6f}")
    print(f"S distance range: [{df['distance_from_origin'].min():.6f}, {df['distance_from_origin'].max():.6f}]")
    
    print("\n--- G Parameter Ranges (degrees) ---")
    print(f"G θ range: [{df['G_theta_deg'].min():.1f}°, {df['G_theta_deg'].max():.1f}°]")
    print(f"G φ range: [{df['G_phi_deg'].min():.1f}°, {df['G_phi_deg'].max():.1f}°]")
    
    print("\n--- Hadit Parameter Ranges (degrees) ---")
    print(f"Hadit θ range: [{df['hadit_theta_deg'].min():.1f}°, {df['hadit_theta_deg'].max():.1f}°]")
    print(f"Hadit φ range: [{df['hadit_phi_deg'].min():.1f}°, {df['hadit_phi_deg'].max():.1f}°]")
    
    print("\n--- S Position Analysis ---")
    print(f"S X range: [{df['S_x'].min():.3f}, {df['S_x'].max():.3f}]")
    print(f"S Y range: [{df['S_y'].min():.3f}, {df['S_y'].max():.3f}]")
    
    # Find some specific interesting cases
    print("\n--- Notable Cases ---")
    
    # Perfect alignments (closest to boundary)
    perfect_idx = df['distance_from_boundary'].idxmin()
    perfect = df.iloc[perfect_idx]
    print(f"Most perfect alignment:")
    print(f"  G(θ={perfect['G_theta_deg']:.1f}°, φ={perfect['G_phi_deg']:.1f}°), "
          f"Hadit(θ={perfect['hadit_theta_deg']:.1f}°, φ={perfect['hadit_phi_deg']:.1f}°)")
    print(f"  S=({perfect['S_x']:.4f}, {perfect['S_y']:.4f}), boundary distance={perfect['distance_from_boundary']:.6f}")
    
    # Check for any patterns in Hadit orientation
    hadit_phi_unique = sorted(df['hadit_phi_deg'].unique())
    print(f"\nHadit φ values that produce alignments: {len(hadit_phi_unique)} unique values")
    if len(hadit_phi_unique) <= 10:
        print(f"  Values: {[f'{x:.1f}°' for x in hadit_phi_unique]}")
    
    return df

def visualize_alignments(alignments, max_points=1000):
    """Create visualizations of the alignment patterns."""
    if not alignments:
        print("No alignments to visualize!")
        return
    
    df = pd.DataFrame(alignments)
    
    # Sample data if too many points
    if len(df) > max_points:
        df_plot = df.sample(n=max_points, random_state=42)
        print(f"Plotting {max_points} random samples out of {len(df)} alignments")
    else:
        df_plot = df
    
    fig, axes = plt.subplots(2, 3, figsize=(18, 12))
    fig.suptitle(f'S-Nuit Alignment Analysis\n{len(alignments)} alignments found', fontsize=16)
    
    # 1. S positions in 2D space
    ax = axes[0, 0]
    scatter = ax.scatter(df_plot['S_x'], df_plot['S_y'], 
                        c=df_plot['distance_from_boundary'], cmap='viridis', alpha=0.6)
    
    # Draw Nuit boundary circle
    nuit_radius = df['nuit_radius'].iloc[0]
    circle = plt.Circle((0, 0), nuit_radius, fill=False, color='red', linewidth=2, linestyle='--')
    ax.add_patch(circle)
    
    ax.set_aspect('equal')
    ax.grid(True, alpha=0.3)
    ax.set_xlabel('S_x')
    ax.set_ylabel('S_y')
    ax.set_title('S Positions (Aligned with Nuit)')
    plt.colorbar(scatter, ax=ax, label='Distance from boundary')
    
    # 2. G parameter space
    ax = axes[0, 1]
    scatter = ax.scatter(df_plot['G_theta_deg'], df_plot['G_phi_deg'], 
                        c=df_plot['distance_from_boundary'], cmap='plasma', alpha=0.6)
    ax.set_xlabel('G θ (degrees)')
    ax.set_ylabel('G φ (degrees)')
    ax.set_title('G Parameter Space')
    ax.grid(True, alpha=0.3)
    plt.colorbar(scatter, ax=ax, label='Distance from boundary')
    
    # 3. Hadit parameter space
    ax = axes[0, 2]
    scatter = ax.scatter(df_plot['hadit_theta_deg'], df_plot['hadit_phi_deg'], 
                        c=df_plot['distance_from_boundary'], cmap='coolwarm', alpha=0.6)
    ax.set_xlabel('Hadit θ (degrees)')
    ax.set_ylabel('Hadit φ (degrees)')
    ax.set_title('Hadit Parameter Space')
    ax.grid(True, alpha=0.3)
    plt.colorbar(scatter, ax=ax, label='Distance from boundary')
    
    # 4. Distance from origin distribution
    ax = axes[1, 0]
    ax.hist(df['distance_from_origin'], bins=50, alpha=0.7, color='green', edgecolor='black')
    ax.axvline(nuit_radius, color='red', linestyle='--', linewidth=2, label=f'Nuit radius ({nuit_radius})')
    ax.set_xlabel('|S| (Distance from origin)')
    ax.set_ylabel('Frequency')
    ax.set_title('Distribution of |S|')
    ax.legend()
    ax.grid(True, alpha=0.3)
    
    # 5. Distance from boundary distribution
    ax = axes[1, 1]
    ax.hist(df['distance_from_boundary'], bins=50, alpha=0.7, color='orange', edgecolor='black')
    ax.set_xlabel('Distance from Nuit boundary')
    ax.set_ylabel('Frequency')
    ax.set_title('Alignment Quality Distribution')
    ax.grid(True, alpha=0.3)
    
    # 6. G vs Hadit relationship
    ax = axes[1, 2]
    # Create a 2D histogram showing relationship between G_theta and Hadit_theta
    hist, xedges, yedges = np.histogram2d(df['G_theta_deg'], df['hadit_theta_deg'], bins=20)
    extent = [xedges[0], xedges[-1], yedges[0], yedges[-1]]
    im = ax.imshow(hist.T, extent=extent, origin='lower', cmap='Blues', alpha=0.7)
    ax.set_xlabel('G θ (degrees)')
    ax.set_ylabel('Hadit θ (degrees)')
    ax.set_title('G-Hadit θ Relationship Density')
    plt.colorbar(im, ax=ax, label='Alignment count')
    
    plt.tight_layout()
    plt.show()

def main():
    """Main analysis function."""
    print("=== S-NUIT ALIGNMENT CALCULATOR ===\n")
    
    # Parameters for analysis
    projection_types = ['xy', 'xz', 'yz']
    nuit_radii = [0.5, 1.0, 1.5]
    tolerance = 0.05
    
    all_results = {}
    
    for projection in projection_types:
        for radius in nuit_radii:
            print(f"\n{'='*60}")
            print(f"ANALYZING: {projection.upper()} projection, Nuit radius = {radius}")
            print(f"{'='*60}")
            
            # Find alignments with reduced resolution for faster computation
            alignments = find_all_alignments(
                theta_samples=36,      # Every 10 degrees
                phi_samples=19,       # Every ~10 degrees  
                hadit_theta_samples=18, # Every 20 degrees
                hadit_phi_samples=10,  # Every ~18 degrees
                nuit_radius=radius,
                projection_type=projection,
                tolerance=tolerance
            )
            
            # Store results
            key = f"{projection}_r{radius}"
            all_results[key] = alignments
            
            # Analyze patterns
            if alignments:
                df = analyze_alignment_patterns(alignments)
                
                # Create visualizations
                print(f"\nCreating visualizations for {projection} projection, radius {radius}...")
                visualize_alignments(alignments)
            else:
                print(f"No alignments found for {projection} projection with radius {radius}")
    
    # Summary across all conditions
    print(f"\n{'='*60}")
    print("OVERALL SUMMARY")
    print(f"{'='*60}")
    
    total_alignments = sum(len(alignments) for alignments in all_results.values())
    print(f"Total alignments found across all conditions: {total_alignments}")
    
    for key, alignments in all_results.items():
        if alignments:
            proj, radius_str = key.split('_r')
            radius = float(radius_str)
            print(f"{proj.upper()} projection, radius {radius}: {len(alignments)} alignments")

if __name__ == "__main__":
    main()
